import { createSlice, PayloadAction } from '@reduxjs/toolkit'; //createAsyncThunk
import { RootState } from '../store'; //  AppThunk
import { v4 as uuid } from 'uuid'


export type TTasksList = {
    [id: string]: TTaskStateItem
}

export type TTaskStateItem = {
    countPlan: number,
    countPass: number,
    index: number,
    name: string
}

type TasksStateType = {
    tasks: TTasksList,
    order: Array<string>
}

const initialState: TasksStateType = {
    tasks: {},
    order: [],
};

export const taskSlice = createSlice({
    name: 'taskList',
    initialState,

    reducers: {
        addTask: (state, action: PayloadAction<{ name: string }>) => {

            const newTaskUuid = uuid()
            // const allCurrentTaskIndexes = [
            //     0,
            //     ...Object.keys(state.tasks).map(i => state.tasks[i].index)
            // ]
            const maxTaskIndex = Math.max(
                0,
                ...Object.keys(state.tasks).map(i => state.tasks[i].index)
            )
            state.order.push(newTaskUuid)
            state.tasks[newTaskUuid] = {
                name: action.payload.name,
                countPlan: 1,
                countPass: 0,
                index: maxTaskIndex + 1,
            }

        },
        deleteTask: (state, action: PayloadAction<{ id: string }>) => {
            const taskIdToDelete = action.payload.id
            delete state.tasks[taskIdToDelete]
            state.order = state.order.filter(i => i !== taskIdToDelete)
        },

        incrementCountPlan: (state, action: PayloadAction<{ id: string }>) => {
            state.tasks[action.payload.id].countPlan = state.tasks[action.payload.id].countPlan + 1
        },

        decrementCountPlan: (state, action: PayloadAction<{ id: string }>) => {
            state.tasks[action.payload.id].countPlan = state.tasks[action.payload.id].countPlan - 1
        },

        editTask: (state, action: PayloadAction<{ id: string, name: string }>) => {
            state.tasks[action.payload.id].name = action.payload.name
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    //   extraReducers: (builder) => {
    //     builder
    //       .addCase(incrementAsync.pending, (state) => {
    //         state.order = 'loading';
    //       })
    //       .addCase(incrementAsync.fulfilled, (state, action) => {
    //         state.order = 'idle';
    //         state.value += action.payload;
    //       })
    //       .addCase(incrementAsync.rejected, (state) => {
    //         state.order = 'failed';
    //       });
    //   },
});

export const { addTask, deleteTask, incrementCountPlan, decrementCountPlan, editTask } = taskSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// export const selectTask = (state: RootState) => state.tasksReducer.tasks;


export default taskSlice.reducer;
